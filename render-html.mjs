import fs from 'node:fs/promises';
import { escape as escapeHtml, min } from 'lodash-es';
import { minify as minifyHtml } from 'html-minifier-terser';

const intFormatter = new Intl.NumberFormat('en', {
	maximumFractionDigits: 0,
});
const formatInt = (number) => {
	return intFormatter.format(number);
};
const deltaFormatter = new Intl.NumberFormat('en', {
	signDisplay: 'exceptZero',
});
const formatDelta = (number, options = {}) => {
	const invert = options.invert;
	if (invert) {
		number = -number;
	}
	const delta = deltaFormatter.format(number);
	const isNeutral = number === 0 || number === null;
	const isNegativeNumber = number < 0;
	const isPositiveResult = !isNegativeNumber;
	return `<span class="${isNeutral ? 'neutral' : (isPositiveResult ? 'good' : 'bad')}">${delta}</span>`;
};

const renderHtml = (embellished) => {
	const output = [
		`<p>Last updated on <time>${escapeHtml(embellished.meta.updated)}</time>.`,
	];
	const table = ['<div class="table-wrapper"><table><thead><tr><th>Date<th colspan=2>Level<th colspan=2>Experience<th colspan=2>Rank<tbody>'];
	for (const entry of embellished.history) {
		table.push(`<tr><th scope=row>${escapeHtml(entry.date)}<td title="${escapeHtml(formatInt(entry.xpNeeded))} xp (${100 - entry.progressWithinLevel}%) until the next level">${escapeHtml(formatInt(entry.level))}<small>.${escapeHtml(String(entry.progressWithinLevel).padStart(2, '0'))}</small> <progress max="100" value="${entry.progressWithinLevel}"></progress><td>${formatDelta(entry.levelDelta)}<td>${escapeHtml(formatInt(entry.experience))}<td>${formatDelta(entry.experienceDelta)}<td>${escapeHtml(entry.rank)}<td>${formatDelta(entry.rankDelta, {invert: true})}`);
	}
	const {days, levelDelta, experienceDelta, rankDelta} = embellished.meta;
	table.push(`<tfoot><tr><th scope=row>${escapeHtml(formatInt(days))} days<td colspan=2 title="${escapeHtml((levelDelta / days).toFixed(2))} levels per day">${formatDelta(levelDelta)} levels<td colspan=2 title="${escapeHtml(formatInt(experienceDelta / days))} experience per day">${formatDelta(experienceDelta)} experience<td colspan=2>${formatDelta(rankDelta, {invert: true})} ranks`);
	table.push('</table></div>');
	output.push(table.join(''));
	const html = output.join('');
	return html;
};

export const updateHtml = async (embellished) => {
	const htmlTemplate = await fs.readFile('./templates/index.html', 'utf8');
	const html = htmlTemplate.toString()
		.replace('%%%DATA%%%', renderHtml(embellished));
	const minifiedHtml = await minifyHtml(html, {
		collapseBooleanAttributes: true,
		collapseInlineTagWhitespace: false,
		collapseWhitespace: false,
		conservativeCollapse: false,
		decodeEntities: true,
		html5: true,
		includeAutoGeneratedTags: false,
		minifyCSS: true,
		minifyJS: true,
		preserveLineBreaks: false,
		preventAttributesEscaping: true,
		removeAttributeQuotes: true,
		removeComments: true,
		removeEmptyAttributes: true,
		removeEmptyElements: false,
		removeOptionalTags: false,
		removeRedundantAttributes: true,
		removeTagWhitespace: false,
		sortAttributes: true,
		sortClassName: true,
	});
	await fs.writeFile('./dist/index.html', minifiedHtml);
};

